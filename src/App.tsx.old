import React, { useEffect, useState, useRef } from 'react';
import { ToastContainer, Slide, toast } from 'react-toastify';
import Modal from 'react-modal';
import size from 'lodash/size';
import isEmpty from 'lodash/isEmpty';
import filter from 'lodash/filter';
import mean from 'lodash/mean';
import map from 'lodash/map';
import min from 'lodash/min';
import max from 'lodash/max';
import sum from 'lodash/sum';
import take from 'lodash/take';
import reverse from 'lodash/reverse';
import sortBy from 'lodash/sortBy';
import findIndex from 'lodash/findIndex';

import EveOnlineAPI from './model/eveOnlineApi';

import MainWrapper from './components/MainWrapper';
import SystemCardWrapper from './components/SystemCardWrapper';
import SystemCard from './components/SystemCard';
import SystemCardHint from './components/SystemCardHint';
import SystemCardAdd from './components/SystemCardAdd';
import ItemWrapper from './components/ItemWrapper';
import ItemCard from './components/ItemCard';
import ItemCardWrapper from './components/ItemCardWrapper';
import ItemSearch from './components/ItemSearch';
import Calculator from './components/Calculator';
import WatchList from './components/WatchList';
import PlayerSkill from './components/PlayerSkill';

import getData from './helpers/getData';
import setData from './helpers/setData';
import getDefaultSystems from './helpers/getDefaultSystems';
import toastError from './helpers/toastError';

const dataSystems = getData('systems');

const App: React.FC = () => {
  const [systemsData, setSystemsData] = useState(!isEmpty(dataSystems) ? dataSystems : getDefaultSystems());
  const [itemsData, setItemsData] = useState(getData('items'));
  const [currentItem, setCurrentItem] = useState<any>({});
  const [currentSystem, setCurrentSystem] = useState<any>(null);
  const [stats, setStats] = useState<any>(getData('stats', true));
  const [statsLoading, setStatsLoading] = useState(false);
  const [minMax, setMinMax] = useState<any>({});
  const [jumps, setJumps] = useState(0);
  const [showHint, setShowHint] = useState(false);
  const [modalIsOpen, setModalIsOpen] = useState(false);
  const [playerSkill, setPlayerSkill] = useState(getData('skills', true));
  const systemsRefs = useRef<any>([]);
  Modal.setAppElement('#root');

  useEffect(() => {
    function changeItem(e: any) {
      const { keyCode } = e;
      console.log('keyCode', keyCode, modalIsOpen);
      if (modalIsOpen && keyCode === 27) {
        toggleModal();
        return;
      }

      setCurrentItem((previous: any) => {
        const currentIndex = findIndex(itemsData, (o: any) => {
          return o.value == previous.value;
        });
        if (keyCode === 37 && currentIndex > 0) {
          return itemsData[currentIndex - 1];
        } else if (keyCode === 39 && currentIndex + 1 < itemsData.length) {
          return itemsData[currentIndex + 1];
        } else {
          return previous;
        }
      });
    }

    if (itemsData && itemsData.length > 0) {
      if (isEmpty(currentItem)) {
        setCurrentItem(itemsData[0]);
      }

      if (itemsData.length >= 2) {
        setShowHint(true);
      }

      document.addEventListener('keydown', changeItem);
      return () => document.removeEventListener('keydown', changeItem);
    }
  }, [itemsData, modalIsOpen]);

  useEffect(() => {
    if (showHint) {
      toast.dark('You can navigate between items using ⬅️ and ➡️ keys', {
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
      });
    }
  }, [showHint]);

  useEffect(() => {
    if (!isEmpty(currentItem) && systemsData && systemsData.length > 0) {
      getItemStat();
    }
  }, [currentItem, systemsData, itemsData]);

  useEffect(() => {
    if (currentSystem) {
      toggleModal(null);
    }
  }, [currentSystem]);

  function getItemStat() {
    setStatsLoading(true);
    const statsData: any = {};

    for (let index = 0; index < systemsData.length; index++) {
      if (
        stats &&
        stats[systemsData[index].value] &&
        stats[systemsData[index].value][currentItem.value] &&
        stats[systemsData[index].value][currentItem.value].cache_expire &&
        stats[systemsData[index].value][currentItem.value].cache_expire > Date.now()
      ) {
        statsData[systemsData[index].value] = stats[systemsData[index].value];
        if (index === systemsData.length - 1) {
          setStatsLoading(false);
          return;
        }
      } else {
        EveOnlineAPI.getMarketOrder(systemsData[index].region_id, currentItem.value)
          .then((sells: any) => {
            EveOnlineAPI.getMarketHistory(systemsData[index].region_id, currentItem.value)
              .then((history: any) => {
                const systemOnly = filter(sells.data, {
                  location_id: systemsData[index].value,
                });

                if (stats && stats[systemsData[index].value]) {
                  statsData[systemsData[index].value] = {
                    ...stats[systemsData[index].value],
                  };
                } else {
                  statsData[systemsData[index].value] = {};
                }

                statsData[systemsData[index].value][currentItem.value] = {
                  orderCount: systemOnly.length,
                  cache_expire: new Date(sells.headers.expires).getTime(),
                  volume: sum(map(systemOnly, 'volume_remain')),
                  min: min(map(systemOnly, 'price')),
                  max: max(map(systemOnly, 'price')),
                  median: mean(map(systemOnly, 'price')),
                  orders: take(sortBy(systemOnly, ['price']), 5),
                  history: reverse(take(reverse(history.data), 10)),
                };
                if (size(statsData) === systemsData.length) {
                  setStats(statsData);
                  setData('stats', statsData, true);
                  setTimeout(() => {
                    setStatsLoading(false);
                  }, 200);
                }
              })
              .catch(toastError);
          })
          .catch(toastError);
      }
    }
  }

  function addSystem(systemInfo: any) {
    setStatsLoading(true);
    if (systemsData.length > 0) {
      setSystemsData(setData('systems', [...systemsData, systemInfo]));
    } else {
      setSystemsData(setData('systems', systemInfo));
    }
  }

  function deleteSystem(index: number) {
    let frozenStats = { ...stats };
    delete frozenStats[index];
    setStats(setData('stats', frozenStats));
    let frozenSystemData = [...systemsData];
    frozenSystemData.splice(index, 1);
    setStatsLoading(true);
    setSystemsData(setData('systems', frozenSystemData));
  }

  function addItem(itemInfo: any) {
    setStatsLoading(true);
    if (itemsData.length > 0) {
      setItemsData(setData('items', [...itemsData, itemInfo]));
    } else {
      setItemsData(setData('items', itemInfo));
    }
  }

  function deleteItem(index: number) {
    let frozenStats = stats;
    for (const [key, value] of Object.entries(frozenStats) as any) {
      if (value[index]) {
        delete value[index];
      }
    }
    setStats(setData('stats', frozenStats));

    const frozenItemData = [...itemsData];
    const deleted: any = frozenItemData.splice(index, 1);
    if (deleted.length > 0 && deleted[0].value === currentItem.value) {
      if (frozenItemData.length > 0) {
        setTimeout(() => {
          setCurrentItem(frozenItemData[frozenItemData.length - 1]);
        }, 200);
      }
    }
    setStatsLoading(true);
    setItemsData(setData('items', frozenItemData));
  }

  function selectItem(item: any) {
    setCurrentItem(item);
  }

  function onCallback(minMax: any, jumps: number) {
    setMinMax(minMax);
    setJumps(jumps);
  }

  function toggleModal(e?: any) {
    if (e) {
      e.preventDefault();
    }
    setModalIsOpen((prevState) => !prevState);
  }

  function openSystemAnomaly(e: any, system: any) {
    e.preventDefault();
    setCurrentSystem(system);
    if (currentSystem && system.value === currentSystem.value && !modalIsOpen) {
      toggleModal(e);
    }
  }

  function savePlayerSkill(data: any) {
    setData('skills', data, true);
    setPlayerSkill(data);
  }

  return (
    <MainWrapper>
      <ItemWrapper>
        <ItemSearch onChangeCallback={addItem} />
        <ItemCardWrapper>
          {itemsData.length > 0
            ? itemsData.map((item: any, index: number) => (
                <ItemCard key={item.value} item={item} select={selectItem} currentItem={currentItem} deleteItem={() => deleteItem(index)} />
              ))
            : null}
        </ItemCardWrapper>
      </ItemWrapper>

      <SystemCardWrapper>
        {systemsData.length > 0
          ? systemsData.map((system: any, index: number) => (
              <SystemCard
                key={system.value}
                ref={(ref) => (systemsRefs.current[index] = ref)}
                system={system}
                currentItem={currentItem}
                stats={stats}
                lowest={minMax && minMax.min !== undefined && system.value === minMax.min.place.value}
                highest={minMax && minMax.max !== undefined && system.value === minMax.max.place.value}
                loading={statsLoading}
                deleteSystem={() => deleteSystem(index)}
                openSystemAnomaly={openSystemAnomaly}
              />
            ))
          : null}
        <SystemCardHint systemsRef={systemsRefs} loading={statsLoading} minMax={minMax} jumps={jumps} />
        <SystemCardAdd onClick={addSystem} />
      </SystemCardWrapper>

      <Calculator
        stats={stats}
        loading={statsLoading}
        systemsData={systemsData}
        currentItem={currentItem}
        onCallback={onCallback}
        playerSkill={playerSkill}
      />
      <ToastContainer
        position="top-right"
        autoClose={3000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        transition={Slide}
      />

      <Modal isOpen={modalIsOpen} className="QuickMarket" overlayClassName="QuickMarket" onRequestClose={toggleModal}>
        <a href="" className="modal-close" onClick={toggleModal}>
          &times;
        </a>
        <WatchList station={currentSystem} addToItems={addItem} playerSkill={playerSkill} />
      </Modal>
      <PlayerSkill setPlayerSkill={savePlayerSkill} playerSkill={playerSkill} />
    </MainWrapper>
  );
};

export default App;
